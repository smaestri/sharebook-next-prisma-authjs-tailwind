// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AUTH

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
  Borrow    Borrow[]
  Messages  Messages[]
  UserBook  UserBook[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// APP

model Book {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime? @default(now())
  title      String
  author     String
  isbn       String
  image      String
  categoryId Int
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  UserBook   UserBook[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime? @default(now())
  Book      Book[]
}

model Borrow {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime? @default(now())
  validatedDate DateTime?
  closedDate    DateTime?
  rdvDate       DateTime?
  rdvPlace      String?
  userBook      UserBook   @relation(fields: [userBookId], references: [id])
  userBookId    Int
  borrower      User       @relation(fields: [borrowerId], references: [id])
  borrowerId    String
  messages      Messages[]
  status        String   @default("PENDING")

  @@unique([userBookId, borrowerId])
}

model Messages {
  id        Int      @id @default(autoincrement())
  createdAt DateTime? @default(now())
  message   String
  borrow    Borrow   @relation(fields: [borrowId], references: [id])
  borrowId  Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBook {
  id        Int      @id @default(autoincrement())
  createdAt DateTime? @default(now())
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deleted   Boolean  @default(false)
  Borrow    Borrow[]
}
